{"version":3,"sources":["webpack:///./src/components/UploadExcel/index.vue?b616","webpack:///./src/components/UploadExcel/utils.js","webpack:///./src/components/UploadExcel/index.vue","webpack:///./src/components/UploadExcel/index.vue?1774","webpack:///./src/api/uploadUser.js","webpack:///./src/views/import/index.vue","webpack:///./src/views/import/index.vue?444d"],"names":["getHeaderRow","sheet","C","headers","range","XLSX","utils","decode_range","R","s","r","c","e","cell","encode_cell","hdr","t","format_cell","push","isExcel","file","test","name","loading","ref","excelUploadInput","handleUpload","value","click","handleChange","files","target","rawFile","upload","props","beforeUpload","before","readerData","Promise","resolve","reject","reader","FileReader","onload","data","result","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","header","results","sheet_to_json","generateData","readAsArrayBuffer","excelData","onSuccess","handleDrop","dataTransfer","length","ElMessage","error","handleDragover","dropEffect","__exports__","uploadUser","request","url","method","useRouter","i18n","useI18n","USER_RELATIONS","username","mobile","title","map","item","user","key","resultArr","console","log","code","success","message","len"],"mappings":"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","file":"js/chunk-1010d0e0.bbb13fbf.js","sourcesContent":["export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./index.vue?vue&type=style&index=0&id=736a11ee&lang=scss&scoped=true\"","import XLSX from \"xlsx\";\n/**\n * 获取表头（通用方式）\n */\nexport const getHeaderRow = (sheet) => {\n  const headers = [];\n  const range = XLSX.utils.decode_range(sheet[\"!ref\"]);\n  let C;\n  const R = range.s.r;\n  /* start in the first row */\n  for (C = range.s.c; C <= range.e.c; ++C) {\n    /* walk every column in the range */\n    const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })];\n    /* find the cell in the first row */\n    let hdr = \"UNKNOWN \" + C; // <-- replace with your desired default\n    if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);\n    headers.push(hdr);\n  }\n  return headers;\n};\n\nexport const isExcel = (file) => {\n  return /\\.(xlsx|xls|csv)$/.test(file.name);\n};\n","<template>\n  <div class=\"upload-excel\">\n    <div class=\"btn-upload\">\n      <el-button :loading=\"loading\" type=\"primary\" @click=\"handleUpload\">\n        {{ $t('msg.uploadExcel.upload') }}\n      </el-button>\n    </div>\n\n    <input\n      ref=\"excelUploadInput\"\n      class=\"excel-upload-input\"\n      type=\"file\"\n      accept=\".xlsx, .xls\"\n      @change=\"handleChange\"\n    />\n    <!-- https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API -->\n    <div\n      class=\"drop\"\n      @drop.stop.prevent=\"handleDrop\"\n      @dragover.stop.prevent=\"handleDragover\"\n      @dragenter.stop.prevent=\"handleDragover\"\n    >\n      <i class=\"el-icon-upload\" />\n      <span>{{ $t('msg.uploadExcel.drop') }}</span>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport XLSX from 'xlsx'\nimport { ref } from 'vue'\nimport { getHeaderRow, isExcel } from './utils.js'\nimport { ElMessage } from 'element-plus'\n\nconst props = defineProps({\n  // 上传前回调\n  beforeUpload: Function,\n  // 成功回调\n  onSuccess: Function\n})\n\n/**\n * 点击上传触发\n */\nconst loading = ref(false)\nconst excelUploadInput = ref(null)\nconst handleUpload = () => {\n  excelUploadInput.value.click()\n}\nconst handleChange = (e) => {\n  const files = e.target.files\n  const rawFile = files[0] // only use files[0]\n  if (!rawFile) return\n  upload(rawFile)\n}\n\n/**\n * 触发上传事件\n */\nconst upload = (rawFile) => {\n  excelUploadInput.value.value = null\n  // 如果没有指定上传前回调的话\n  if (!props.beforeUpload) {\n    readerData(rawFile)\n    return\n  }\n  // 如果指定了上传前回调，那么只有返回 true 才会执行后续操作\n  const before = props.beforeUpload(rawFile)\n  if (before) {\n    readerData(rawFile)\n  }\n}\n\n/**\n * 读取数据（异步）\n */\nconst readerData = (rawFile) => {\n  loading.value = true\n  return new Promise((resolve, reject) => {\n    // https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader\n    const reader = new FileReader()\n    // 该事件在读取操作完成时触发\n    // https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader/onload\n    reader.onload = (e) => {\n      // 1. 获取解析到的数据\n      const data = e.target.result\n      // 2. 利用 XLSX 对数据进行解析\n      const workbook = XLSX.read(data, { type: 'array' })\n\n      // 3. 获取第一张表格(工作簿)名称\n      const firstSheetName = workbook.SheetNames[0]\n      // 4. 只读取 Sheet1（第一张表格）的数据\n      const worksheet = workbook.Sheets[firstSheetName]\n      // 5. 解析数据表头\n      const header = getHeaderRow(worksheet)\n      // 6. 解析数据体\n      const results = XLSX.utils.sheet_to_json(worksheet)\n      // 7. 传入解析之后的数据\n\n      generateData({ header, results })\n      // 8. loading 处理\n      loading.value = false\n      // 9. 异步完成\n      resolve()\n    }\n    // 启动读取指定的 Blob 或 File 内容\n    reader.readAsArrayBuffer(rawFile)\n  })\n}\n\n/**\n * 根据导入内容，生成数据\n */\nconst generateData = (excelData) => {\n  props.onSuccess && props.onSuccess(excelData)\n}\n\n// 拖拽文本释放时触发\nconst handleDrop = (e) => {\n  // 上传中跳过\n  if (loading.value) return\n  const files = e.dataTransfer.files\n  if (files.length !== 1) {\n    ElMessage.error('必须要有一个文件')\n    return\n  }\n  const rawFile = files[0]\n  if (!isExcel(rawFile)) {\n    ElMessage.error('文件必须是 .xlsx, .xls, .csv 格式')\n    return false\n  }\n  // 触发上传事件\n  upload(rawFile)\n}\n\n// 拖拽悬停时触发\nconst handleDragover = (e) => {\n  // https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer/dropEffect\n  // 在新位置生成源项的副本\n  e.dataTransfer.dropEffect = 'copy' //显示复制的文本\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.upload-excel {\n  display: flex;\n  justify-content: center;\n  margin-top: 100px;\n  .excel-upload-input {\n    display: none;\n    z-index: -9999;\n  }\n  .btn-upload,\n  .drop {\n    border: 1px dashed #bbb;\n    width: 350px;\n    height: 160px;\n    text-align: center;\n    line-height: 160px;\n  }\n  .drop {\n    line-height: 60px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    color: #bbb;\n    i {\n      font-size: 60px;\n      display: block;\n    }\n  }\n}\n</style>\n","import script from \"./index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=736a11ee&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\朱雀\\\\Desktop\\\\vue\\\\vue3-cms\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-736a11ee\"]])\n\nexport default __exports__","import request from '@/utils/request'\r\n\r\n\r\nexport const uploadUser = data => {\r\n  return request({\r\n    url: '/user/uploadUser',\r\n    method: 'POST',\r\n    data\r\n  })\r\n}\r\n\r\n\r\n","<template>\n  <div class=\"\">\n    <upload-excel :onSuccess=\"onSuccess\"></upload-excel>\n  </div>\n</template>\n\n<script setup>\nimport UploadExcel from '@/components/UploadExcel'\nimport { useRouter } from 'vue-router'\nimport { uploadUser } from '@/api/uploadUser'\n\nimport { ElMessage } from 'element-plus'\nimport { useI18n } from 'vue-i18n'\nconst router = useRouter()\nconst i18n = useI18n()\nconst USER_RELATIONS = {\n  username: '姓名',\n  mobile: '联系方式',\n  title: '角色'\n}\nconst onImportExcelClick = () => {\n  router.push('/user/import')\n}\n// 筛选数组\nconst generateData = (result) => {\n  return result.map((item) => {\n    let user = {}\n    for (const key in item) {\n      if (key === USER_RELATIONS.username) {\n        user.username = item[key]\n      } else if (key === USER_RELATIONS.mobile) {\n        user.mobile = item[key]\n      } else if (key === USER_RELATIONS.title) {\n        user.title = [{ title: item[key] }]\n      }\n    }\n    return user\n  })\n}\nconst onSuccess = async (excelData) => {\n  const resultArr = generateData(excelData.results)\n  console.log(resultArr)\n  // 发起请求 然后触发重新获取 userList\n  const { data } = await uploadUser(resultArr)\n  if (data.code === 0) {\n    ElMessage.success({\n      message: data.len + i18n.t('msg.excel.importSuccess'),\n      type: 'success'\n    })\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped></style>\n","import script from \"./index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}